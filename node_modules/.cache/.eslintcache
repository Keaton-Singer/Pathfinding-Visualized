[{"/Users/keatonsinger/Desktop/Algorithm-Visualizer/src/index.js":"1","/Users/keatonsinger/Desktop/Algorithm-Visualizer/src/App.js":"2"},{"size":232,"mtime":1673142489679,"results":"3","hashOfConfig":"4"},{"size":11623,"mtime":1673330270667,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dgw23s",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/keatonsinger/Desktop/Algorithm-Visualizer/src/index.js",[],[],"/Users/keatonsinger/Desktop/Algorithm-Visualizer/src/App.js",["13","14","15","16","17"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  \n  const [RES, setRES_] = useState(49);\n  const [TOTAL, setTOTAL_] = useState(Math.pow(RES, 2));\n  const [BITWIDTH, setBITWIDTH] = useState(100 / RES); \n  const path = useRef([]);\n  const speed = useRef(50);\n  const stackDFS = useRef([]);\n  const queueBFS = useRef([]);\n  const mouseHeld = useRef(\"up\");\n  const startPersist = useRef(\"Start!\");\n  const [bitmap, setBitmap] = useState([]);\n  const [algorithm, setAlgorithm] = useState(\"DFS\");\n  const [algOption, setAlgOption] = useState(\"hidden\");\n  const [speedOption, setSpeedOption] = useState(\"hidden\");\n  const [toolsOption, setToolsOption] = useState(\"hidden\");\n  const [optionsClose, setOptionsClose] = useState(\"hidden\");\n  const [bitmapOption, setBitmapOption] = useState(\"hidden\");\n  const [startButton, setStartButton] = useState(\"Start!\");\n  const [pathHead, setPathHead] = useState(-1);\n  const [origin, setOrigin] = useState(Math.round(TOTAL * 0.66) - 1);\n  const [target, setTarget] = useState(Math.round(TOTAL * 0.34));\n  const [walls, setWalls] = useState([]);\n  const [tool, setTool] = useState(\"None\");\n  \n  \n  useEffect(() => {\n    GenerateBitmap();\n  }, [origin, target, walls, path.current, pathHead, tool]);\n  \n  \n  useEffect(() => {\n    if (startButton !== \"Stop!\") { return; }\n    else if (algorithm === \"DFS\" && path.current.length === 0) { DFS(origin); }\n    else if (algorithm === \"DFS\") { DFS(path.current[path.current.length - 1]); }\n    else if (algorithm === \"BFS\" && path.current.length === 0) { BFS(origin); }\n    else if (algorithm === \"BFS\") { BFS(path.current[path.current.length - 1]); }\n  }, [startButton]);\n\n\n  window.addEventListener('mousedown', () => {\n    mouseHeld.current = true;\n  });\n\n\n  window.addEventListener('mouseup', () => {\n    mouseHeld.current = false;\n  });\n\n\n  const sleep = ms => new Promise(\n    resolve => setTimeout(resolve, ms)\n  );\n\n\n  function Draw(bitIndex, action) {\n    if (mouseHeld.current === true) { ToggleCategory(optionsClose, setOptionsClose); };\n    if (action === \"drag\" && mouseHeld.current === false) { return; }\n    if (startPersist.current !== \"Start!\" || tool === \"None\") { return; }\n    else if (tool === \"Move Origin\" && path.current.length !== 0) { return; }\n    else if (tool === \"Move Origin\" && bitIndex !== target && \n      !walls.includes(bitIndex) && path.current.length === 0) { setOrigin(bitIndex); }\n    else if (tool === \"Move Target\" && bitIndex !== origin && \n      !walls.includes(bitIndex) && !path.current.includes(bitIndex)) { setTarget(bitIndex); }\n    else if (bitIndex === origin || bitIndex === target) { return; }\n    else if (tool === \"Place Walls\") { setWalls(walls => [...walls, bitIndex]); }\n    else if (tool === \"Erase Walls\" && path.current.length === 0) {\n      let wallsCopy = [...walls];\n      wallsCopy = wallsCopy.filter((index) => { return index !== bitIndex; });\n      setWalls([...wallsCopy]);\n    };\n  };\n\n\n  function EmptyBit(bitIndex) {\n    if (!walls.includes(bitIndex) && !path.current.includes(bitIndex)) { return true; };\n    return false;\n  };\n\n\n  async function DFS(currentBit) {\n    function stackPush(item) { stackDFS.current = [...stackDFS.current, item]; };\n    if (stackDFS.current.length === 0) { stackPush(currentBit); };\n    let topItem = -1;\n    while (stackDFS.current.length) {\n      await sleep(speed.current);\n      if (startPersist.current === \"Start!\") { break; }\n      let lastIndex = stackDFS.current.length - 1;\n      topItem = stackDFS.current[lastIndex];\n      stackDFS.current = stackDFS.current.slice(0, lastIndex);\n      if (walls.includes(topItem)) { continue; }\n      setPathHead(topItem);\n      if (topItem === target) { break; }\n      path.current = [...path.current, topItem];\n      if (topItem % RES > 0 && EmptyBit(topItem - 1, path.current)) { stackPush(topItem - 1); };\n      if (topItem < (TOTAL - RES) && EmptyBit(topItem + RES, path.current)) { stackPush(topItem + RES); };\n      if (topItem % RES < (RES - 1) && EmptyBit(topItem + 1, path.current)) { stackPush(topItem + 1); };\n      if (topItem > (RES - 1) && EmptyBit(topItem - RES, path.current)) { stackPush(topItem - RES); };\n    };\n    if (path.current.indexOf(undefined) > -1 || path.current.length === 0) { path.current = []; return; }\n    else if (topItem === target || stackDFS.current.length === 0) { setStartButton(\"Clear Path!\"); };\n  };\n\n\n  async function BFS(currentBit) {\n    function queueAppend(item) { queueBFS.current = [...queueBFS.current, item]; };\n    if (queueBFS.current.length === 0) { queueAppend(currentBit); };\n    let nextItem = -1;\n    while (queueBFS.current.length !== 0) {\n      console.log(queueBFS.current);\n      await sleep(speed.current)\n      if (startPersist.current === \"Start!\") { break; }\n      let lastIndex = queueBFS.current.length - 1;\n      nextItem = queueBFS.current[0];\n      queueBFS.current = queueBFS.current.slice(1, lastIndex + 1);\n      if (walls.includes(nextItem)) { continue; }\n      setPathHead(nextItem);\n      if (nextItem === target) { break; }\n      path.current = [...path.current, nextItem];\n      if (nextItem > (RES - 1) && EmptyBit(nextItem - RES) && !queueBFS.current.includes(nextItem - RES)) queueAppend(nextItem - RES);\n      if (nextItem % RES < (RES - 1) && EmptyBit(nextItem + 1) && !queueBFS.current.includes(nextItem + 1)) queueAppend(nextItem + 1);\n      if (nextItem < (TOTAL - RES) && EmptyBit(nextItem + RES) && !queueBFS.current.includes(nextItem + RES)) queueAppend(nextItem + RES);\n      if (nextItem % RES > 0 && EmptyBit(nextItem - 1) && !queueBFS.current.includes(nextItem - 1)) queueAppend(nextItem - 1);\n    }\n    if (path.current.indexOf(undefined) > -1 || path.current.length === 0) { path.current = []; return; }\n    else if (nextItem === target || queueBFS.current.length === 0) { setStartButton(\"Clear Path!\"); };\n  }\n\n\n  function GenerateBitmap() {\n    let generatedBits = [];\n    for (let bitIndex = 0; bitIndex < TOTAL; bitIndex++) {\n        generatedBits.push(\n          <div id=\"Bit\" \n            onMouseEnter={() => { Draw(bitIndex, \"drag\"); }} \n            onMouseDown={() => { Draw(bitIndex, \"click\"); }} \n            style={{backgroundColor: \n              (bitIndex === pathHead) ? \"green\" : \n              (bitIndex === origin || path.current.includes(bitIndex)) ? \"rgb(120, 210, 130)\" : \n              (bitIndex === target) ? \"rgb(210, 120, 130)\" :\n              (walls.includes(bitIndex) ? \"rgb(40, 40, 40)\" : \"rgb(40, 100, 140)\"),\n            width: `${BITWIDTH}vw`, height: `${BITWIDTH}vw`}}>\n          </div>\n        );\n    };\n    setBitmap(generatedBits);\n  };\n\n\n  function CleanBitmap(coverage) {\n    if (coverage === \"full\") {\n      setOrigin(Math.round(TOTAL * 0.66) - 1);\n      setTarget(Math.round(TOTAL * 0.34));\n      setWalls([]);\n    }\n    startPersist.current = \"Start!\"; \n    setStartButton(\"Start!\"); \n    stackDFS.current = [];\n    queueBFS.current = [];\n    path.current = [];\n    setPathHead(-1);\n  }\n\n\n  function ChangeButton() {\n    if (startPersist.current === \"Stop!\" ) { startPersist.current = \"Start!\"; }\n    else { startPersist.current = \"Stop!\"; };\n    if (startButton === \"Start!\") { setStartButton(\"Stop!\"); }\n    else if (startButton === \"Stop!\") { setStartButton(\"Start!\"); }\n    else { CleanBitmap(\"partial\"); };\n  };\n\n\n  function ToggleCategory(state, setFunction) {\n    let categories = [setAlgOption, setSpeedOption, setToolsOption, setBitmapOption];\n    for (let index = 0; index < 4; index++) { categories[index](\"hidden\"); };\n    (state === \"hidden\") ? setFunction(\"visible\") : setFunction(\"hidden\");\n  };\n\n\n  return (\n    <div className=\"App\">\n      <div id=\"Header\">\n        <div id=\"HeaderTitle\" \n          onMouseEnter={() => { mouseHeld.current = false; }}\n          onClick={() => { ToggleCategory(optionsClose, setOptionsClose); }}>\n          Pathfinding Visualized\n        </div>\n        <div id=\"Categories\">\n          <div className=\"Category\"\n            onClick={() => {ToggleCategory(algOption, setAlgOption)}}>\n            Algorithms\n            <div className=\"Option\" \n              onClick={() => { setAlgorithm(\"DFS\"); CleanBitmap(\"partial\"); }}\n              style={{visibility: algOption}}>\n              DFS\n            </div>\n            <div className=\"OptionBottom\" \n              onClick={() => { setAlgorithm(\"BFS\"); CleanBitmap(\"partial\"); }}\n              style={{visibility: algOption}}>\n              BFS\n            </div>\n          </div>\n          <div className=\"Category\" \n            onClick={() => {ToggleCategory(speedOption, setSpeedOption)}}>\n            Speed\n            <div className=\"Option\" \n              onClick={() => { speed.current = 500; }}\n              style={{visibility: speedOption}}>\n              Slow\n            </div>\n            <div className=\"Option\" \n              onClick={() => { speed.current = 50; }}\n              style={{visibility: speedOption}}>\n              Medium\n            </div>\n            <div className=\"OptionBottom\" \n              onClick={() => { speed.current = 5; }}\n              style={{visibility: speedOption}}>\n              Fast\n            </div>\n          </div>\n          <div className=\"Category\" onClick={() => {ToggleCategory(toolsOption, setToolsOption)}}>\n            Tools\n            <div className=\"Option\" \n              onClick={() => { setTool(\"Move Origin\"); }}\n              style={{visibility: toolsOption}}>\n              Move Origin\n            </div>\n            <div className=\"Option\" \n              onClick={() => { setTool(\"Move Target\"); }}\n              style={{visibility: toolsOption}}>\n              Move Target\n            </div>\n            <div className=\"Option\" \n              onClick={() => { setTool(\"Place Walls\"); }}\n              style={{visibility: toolsOption}}>\n              Place Walls\n            </div>\n            <div className=\"OptionBottom\" \n              onClick={() => { setTool(\"Erase Walls\"); }}\n              style={{visibility: toolsOption}}>\n              Erase Walls\n            </div>\n          </div>\n          <div className=\"Category\" \n            onClick={() => {ToggleCategory(bitmapOption, setBitmapOption)}}>\n            Bitmap\n            <div className=\"Option\" \n              onClick={() => { CleanBitmap(\"partial\"); }}\n              style={{visibility: bitmapOption}}>\n              Clear Path\n            </div>\n            <div className=\"OptionBottom\" \n              onClick={() => { CleanBitmap(\"full\"); }}\n              style={{visibility: bitmapOption}}>\n              Reset Bitmap\n            </div>\n          </div>\n        </div>\n      </div>\n      <div id=\"StartStop\" \n        onClick={() => { ToggleCategory(optionsClose, setOptionsClose); ChangeButton(); }} \n        style={{backgroundColor: (startButton === \"Start!\") ? \"green\" : \n                                 (startButton === \"Stop!\") ? \"red\" : \"grey\"}}>\n        {startButton}\n      </div>\n      <div id=\"KeyContainer\"\n        onClick={() => { ToggleCategory(optionsClose, setOptionsClose); }}>\n        <div className=\"Key\"><div id=\"Visiting\"></div><div>VISITING</div></div>\n        <div className=\"Key\"><div id=\"Target\"></div><div>TARGET</div></div>\n        <div className=\"Key\"><div id=\"Origin\"></div><div>PATH</div></div>\n        <div className=\"Key\"><div id=\"Wall\"></div><div>WALL</div></div>\n      </div>\n      <div id=\"ToolSelected\">TOOL SELECTED: <div id=\"ActualTool\">{tool}</div></div>\n      <div id=\"BitmapContainer\"\n        onClick={() => { ToggleCategory(optionsClose, setOptionsClose); }}>\n        {bitmap}\n      </div> \n    </div>\n  );\n} \n\nexport default App;\n\n",{"ruleId":"18","severity":1,"message":"19","line":6,"column":15,"nodeType":"20","messageId":"21","endLine":6,"endColumn":22},{"ruleId":"18","severity":1,"message":"22","line":7,"column":17,"nodeType":"20","messageId":"21","endLine":7,"endColumn":26},{"ruleId":"18","severity":1,"message":"23","line":8,"column":20,"nodeType":"20","messageId":"21","endLine":8,"endColumn":31},{"ruleId":"24","severity":1,"message":"25","line":32,"column":6,"nodeType":"26","endLine":32,"endColumn":59,"suggestions":"27"},{"ruleId":"24","severity":1,"message":"28","line":41,"column":6,"nodeType":"26","endLine":41,"endColumn":19,"suggestions":"29"},"no-unused-vars","'setRES_' is assigned a value but never used.","Identifier","unusedVar","'setTOTAL_' is assigned a value but never used.","'setBITWIDTH' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GenerateBitmap'. Either include it or remove the dependency array. Mutable values like 'path.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["30"],"React Hook useEffect has missing dependencies: 'BFS', 'DFS', 'algorithm', and 'origin'. Either include them or remove the dependency array.",["31"],{"desc":"32","fix":"33"},{"desc":"34","fix":"35"},"Update the dependencies array to be: [origin, target, walls, pathHead, tool, GenerateBitmap]",{"range":"36","text":"37"},"Update the dependencies array to be: [BFS, DFS, algorithm, origin, startButton]",{"range":"38","text":"39"},[1225,1278],"[origin, target, walls, pathHead, tool, GenerateBitmap]",[1681,1694],"[BFS, DFS, algorithm, origin, startButton]"]